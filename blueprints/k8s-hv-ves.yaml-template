# -*- indent-tabs-mode: nil -*- # vi: set expandtab:
#
# ============LICENSE_START====================================================
# =============================================================================
# Copyright (C) 2018-2019 NOKIA
# =============================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END======================================================

tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://www.getcloudify.org/spec/cloudify/4.5.5/types.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2_platform_plugins_releases }}/k8splugin/1.7.2/k8splugin_types.yaml

inputs:
  tag_version:
    type: string
    default: '{{ ONAPTEMPLATE_DOCKERREGURL_org_onap_dcaegen2_releases }}/onap/org.onap.dcaegen2.collectors.hv-ves.hv-collector-main:1.3.0'
  hv_ves_name:
    type: string
    default: 'dcae-hv-ves-collector'
  replicas:
    type: integer
    description: number of instances
    default: 1
  host_port:
    type: integer
    description: Network port that the platform service is expecting to expose on the host
    default: 30222
  container_port:
    type: integer
    description: Network port that the platform service exposes in the container
    default: 6061
  kafka_bootstrap_servers:
    type: string
    default: 'message-router-kafka:9092'
  kafka_username:
    type: string
    default: 'admin'
  kafka_password:
    type: string
    default: 'admin_secret'
  perf3gpp_kafka_topic:
    type: string
    default: 'HV_VES_PERF3GPP'
  log_level:
    type: string
    default: 'INFO'
  server_idle_timeout_sec:
    type: integer
    default: 300
  cbs_request_interval_sec:
    type: integer
    default: 5
  security_ssl_disable:
    type: boolean
    default: true
  security_keys_key_store_file:
    type: string
    default: '/etc/ves-hv/ssl/cert.jks'
  security_keys_key_store_password_file:
    type: string
    default: '/etc/ves-hv/ssl/jks.pass'
  security_keys_trust_store_file:
    type: string
    default: '/etc/ves-hv/ssl/trust.jks'
  security_keys_trust_store_password_file:
    type: string
    default: '/etc/ves-hv/ssl/trust.pass'
node_templates:
  hv-ves:
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            envs:
              JAVA_OPTS: { concat: [ '-Dlogback.configurationFile=/etc/ONAP/', { get_input: hv_ves_name }, '/logback.xml' ] }
    properties:
      application_config:
        logLevel: { get_input: log_level }
        server.idleTimeoutSec: { get_input: server_idle_timeout_sec }
        server.listenPort: { get_input: container_port }
        cbs.requestIntervalSec: { get_input: cbs_request_interval_sec}
        security.sslDisable: { get_input: security_ssl_disable }
        security.keys.keyStoreFile: { get_input: security_keys_trust_store_file }
        security.keys.keyStorePasswordFile: { get_input: security_keys_key_store_password_file }
        security.keys.trustStoreFile: { get_input: security_keys_trust_store_file }
        security.keys.trustStorePasswordFile: { get_input: security_keys_trust_store_password_file }
        streams_publishes:
          perf3gpp:
            type: kafka
            aaf_credentials:
              username: { get_input: kafka_username }
              password: { get_input: kafka_password }
            kafka_info:
              bootstrap_servers: { get_input: kafka_bootstrap_servers }
              topic_name: { get_input: perf3gpp_kafka_topic }
      docker_config:
        healthcheck:
          type: script
          script: "/opt/ves-hv-collector/healthcheck.sh"
          interval: 15s
          timeout: 2s
      image: { get_input: tag_version }
      replicas: { get_input: replicas }
      name: { get_input: hv_ves_name }
      dns_name: { get_input: hv_ves_name }
      container_port: { get_input: container_port }
      host_port: { get_input: host_port }
      log_info:
        log_directory: { concat: [ '/var/log/ONAP/', { get_input: hv_ves_name } ] }
      tls_info:
        cert_directory: '/etc/ves-hv/ssl'
        use_tls: false
    type: dcae.nodes.ContainerizedPlatformComponent
