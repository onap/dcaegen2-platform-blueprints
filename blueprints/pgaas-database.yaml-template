# -*- indent-tabs-mode: nil -*- # vi: set expandtab:

tosca_definitions_version: cloudify_dsl_1_3

description: |-
  This blueprint is used to install and to uninstall a persistent database into the central postgres as a platform service.
  This blueprint depends upon the deployment of the pgaas_plugin, the PGaaS Cinder volume, the PGaaS service, and Consul.
  This blueprint is part of a suite of three blueprints that allow a PGaaS
  cluster to be created that has persistent databases stored in Cinder.
  pgaas-disk allocates the cinder volumes. It must be run first.
  pgaas-cluster creates the PG service and attaches the cinder volumes. It must be run second.
  pgaas-database creates a database. It must be run third, for each persistent database.
  If the cluster is uninstalled, the persistent databases are unaffected.
  If a database blueprint is uninstalled, the persistent database goes away.
  If the disk blueprint is uninstalled, all persistent databases go away, along with the server instance.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml

  - "{{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2_platform_plugins_releases }}/type_files/pgaas_plugin/1.0.0/pgaas_types.yaml"

inputs:
  # environment info
  blueprint_version:
    type: string
    default: 'VERSION-STAMP-GOES-HERE'
  flavor_id:
    type: string
  key_filename:
    type: string
  keypair:
    type: string
  location_domain:
    type: string
  location_prefix:
    type: string
  openstack: {}
  private_net:
    type: string
  public_net:
    type: string
  security_group:
    type: string
  ubuntu1604image_id:
    type: string

  # pgaas-specific info
  pgaas_cluster_name:
    type: string
    default: pgcl
  database_contacts:
    type: {}
    default: {}
  database_description:
    type: string
    default: 'This is a sample database'
  database_name:
    type: string
    default: sample
  
node_templates:
  pgaasdbtest:
    type: dcae.nodes.pgaas.database
    properties:
      writerfqdn: { concat: [ { get_input: location_prefix }, '-', { get_input: pgaas_cluster_name }, '-write.', { get_input: location_domain } ] }
      name: { get_input: database_name }
