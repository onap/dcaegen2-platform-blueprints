# -*- indent-tabs-mode: nil -*- # vi: set expandtab:
#
# ============LICENSE_START====================================================
# org.onap.dcae
# =============================================================================
# Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
# =============================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END======================================================

tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint installs the config binding service

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2_platform_plugins_releases }}/docker-node-type.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2_platform_plugins_releases }}/type_files/relationship/1.0.0/node-type.yaml

inputs:

  location_id:
    description: Location of where to deploy to

  docker_host_override:
    description: Target docker host to deploy applications to
    # This default comes from the DockerBP.yaml
    default: 'platform_dockerhost'
  
  cbs_image: 
    description: full url of the CBS image

node_templates:
  # Config binding service
  service-config-binding:
    type: dcae.nodes.DockerContainerForPlatforms
    properties:
        name: 'config_binding_service'
        host_port: 10000
        container_port: 10000
        image: { get_input : cbs_image }
        docker_config:
            healthcheck:
                type: "http"
                endpoint: "/healthcheck"

    relationships:
      - type: dcae.relationships.component_contained_in
        target: docker_host

  docker_host:
    type: dcae.nodes.SelectedDockerHost
    properties:
        location_id:
            { get_input: location_id }
        docker_host_override:
            { get_input: docker_host_override }
